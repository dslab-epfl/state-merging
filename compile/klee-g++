#!/usr/bin/env python

LLVM_LD_PATH = "/home/zamf/llvm/llvm-2.6/Release/bin/"
LLVM_CPP_PATH = "/home/zamf/llvm/llvm-gcc4.2-2.6.source/install/bin/"

import os, sys, subprocess

def isLinkCommand():
    # Look for '-Wl,' as a signal that we are calling the linker. What a hack.
    for arg in sys.argv:
        if arg.startswith('-Wl,'):
            return True
        if arg.startswith('-l'):
            return True

def main():
    if not isLinkCommand():
        args = ""
        for i in sys.argv[1:]:
            args = args + " " + i
        p = subprocess.Popen(LLVM_CPP_PATH + "llvm-g++" + " -emit-llvm" + args, shell=True)
        os.waitpid(p.pid, 0)[1]
        return 1

    # Otherwise, strip out arguments that llvm-ld doesn't understand. I don't
    # want my previous explicit declaration of hackyness to imply that this bit
    # of code here is not also a complete and total hack, it is.
    args = sys.argv[1:]
    linkArgs = ""
    for a in args:
        if a in ('-g', '-W', '-O', '-D', '-f',
                 '-fnested-functions', '-pthread',
                 '-m32', '-fno-exceptions'):
            continue
        elif a.startswith('-Wl,'):
            continue
        elif a.startswith('-D'):
            continue                          
        elif a.startswith('-O'):
            continue
        elif a.startswith('-I'):
            continue

        linkArgs = linkArgs + " " + a
        
    p = subprocess.Popen( LLVM_LD_PATH + "llvm-ld" + " --disable-opt " + linkArgs, shell=True)
    os.waitpid(p.pid, 0)[1]
    return 1

if __name__ == '__main__':
    main()
